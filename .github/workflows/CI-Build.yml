name: CI-Build
on:
  workflow_dispatch:
  push:
    branches: [ "**" ]

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  target-version: "net7.0"
  compile-flags: "--self-contained=true -c Release -p:UseAppHost=true -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true -p:DebugType=None -p:DebugSymbols=false -p:PublishSingleFile=true"
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Test
      run: dotnet test wonderlab/wonderlab.csproj
  test_build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Test
      run: dotnet build wonderlab/wonderlab.csproj
  build_Windows:
    strategy:
      matrix:
        arch: ["x64", "arm64"] #We won't support x86 anymore
    runs-on: windows-latest
    needs: [test, test_build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Build
      run: dotnet build wonderlab/wonderlab.csproj -t:CreateZip --arch ${{ matrix.arch }} --os win ${{ env.compile-flags }}
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Windows
        path: wonderlab/bin/Release/${{ env.target-version }}/win-${{ matrix.arch }}/*.zip
  build_Windows_Installer:
    strategy:
      matrix:
        arch: ["x64", "arm64"]#We won't support x86 anymore
    runs-on: windows-latest
    needs: [test, test_build, build_Windows]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install InnoSetup
      uses: ConorMacBride/install-package@v1
      with:
        choco: innosetup
    - name: Install pupnet
      run: dotnet tool install -g KuiperZone.PupNet
    - name: Get version
      id: package_version
      uses: Blessing-Studio/get-csproj-version@main
      with:
        file: wonderlab/wonderlab.csproj
    - name: Build
      run: pupnet -r win-${{ matrix.arch }} -k setup -y -o wonderlab.${{ steps.package_version.outputs.version }}.win-${{ matrix.arch }}.installer.exe
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: WindowsInstaller
        path: Deploy/OUT/*.exe
  build_Linux_Appimage:
    strategy:
      matrix:
        arch: ["x64", "arm", "arm64"] #"bionic-arm64", "musl-x64" is not available
    runs-on: ubuntu-latest
    needs: [test, test_build]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Install pupnet
      run: dotnet tool install -g KuiperZone.PupNet
    - name: Install Linrary
      run: |
          sudo add-apt-repository universe
          sudo apt install libfuse2
    - name: Get version
      id: package_version
      uses: Blessing-Studio/get-csproj-version@main
      with:
        file: wonderlab/wonderlab.csproj
    - name: Build
      run: pupnet --runtime linux-${{ matrix.arch }} --kind appimage -y -o wonderlab.${{ steps.package_version.outputs.version }}.linux-${{ matrix.arch }}.AppImage
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: AppImage
        path: Deploy/OUT/*.AppImage
  Release:
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      GITHUB_REF: $ github.ref
    needs: [build_Windows_Installer, build_Windows, build_Linux_Appimage]
    steps:
    - uses: nelonoel/branch-name@v1
    - name: Download Windows Build
      uses: actions/download-artifact@v3
      with:
       name: Windows
    - name: Download Windows Installer Build
      uses: actions/download-artifact@v3
      with:
       name: WindowsInstaller
    - name: Download AppImage Build
      uses: actions/download-artifact@v3
      with:
       name: AppImage
    - name: Create Release
      if: github.event_name != 'pull_request' 
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        automatic_release_tag: AutoBuild_${{ env.BRANCH_NAME }}
        title: "自动构建版本 - ${{ env.BRANCH_NAME }}"
        files: |
            *.exe
            *.zip
            *.AppImage
  Delete_Artifacts:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: [Release]
    steps:
    - name: Delete Windows Artifact
      uses: geekyeggo/delete-artifact@v2
      with:
          name: Windows
    - name: Delete WindowsInstaller Artifact
      uses: geekyeggo/delete-artifact@v2
      with:
          name: WindowsInstaller
    - name: Delete AppImage Artifact
      uses: geekyeggo/delete-artifact@v2
      with:
          name: AppImage
